'''
Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
 

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?
'''
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        ## if different length fail
        ret = False 
        if len(s) != len(t):
            return ret
        ############################
        ## could check if string have same number of specific letters?
        ## brute force probably go through each combination 
        s_dic = {}
        t_dic = {}
        #for i in range(0,len(s)):
        #    if s[i] in 
        s_sorted =sorted(s)
        t_sorted =sorted(t) 
        s_set = set(s_sorted)
        t_set = set(t_sorted)
        if s_set != t_set:
            return ret
        for i in range(0,len(s)):
            if s_sorted[i] in s_dic:
                s_dic[s_sorted[i]] += 1
            elif s_sorted[i] not in s_dic:
                s_dic[s_sorted[i]] = 1
            if t_sorted[i] in t_dic:
                t_dic[t_sorted[i]] += 1
            elif t_sorted[i] not in t_dic:
                t_dic[t_sorted[i]] = 1
        ret = True
       
        for i in s_set:
            if s_dic[i] == t_dic[i]:
                pass
            else:
                ret = False
                break
        return ret
sol = Solution()
print(sol.isAnagram("anagram",'naagram'))